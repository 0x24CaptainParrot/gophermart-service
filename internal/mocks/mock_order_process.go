// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/0x24CaptainParrot/gophermart-service/internal/pkg/service (interfaces: OrderProcessing)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/0x24CaptainParrot/gophermart-service/internal/models"
	gomock "github.com/golang/mock/gomock"
)

// MockOrderProcessing is a mock of OrderProcessing interface.
type MockOrderProcessing struct {
	ctrl     *gomock.Controller
	recorder *MockOrderProcessingMockRecorder
}

// MockOrderProcessingMockRecorder is the mock recorder for MockOrderProcessing.
type MockOrderProcessingMockRecorder struct {
	mock *MockOrderProcessing
}

// NewMockOrderProcessing creates a new mock instance.
func NewMockOrderProcessing(ctrl *gomock.Controller) *MockOrderProcessing {
	mock := &MockOrderProcessing{ctrl: ctrl}
	mock.recorder = &MockOrderProcessingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderProcessing) EXPECT() *MockOrderProcessingMockRecorder {
	return m.recorder
}

// EnqueueOrder mocks base method.
func (m *MockOrderProcessing) EnqueueOrder(arg0 context.Context, arg1 models.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnqueueOrder", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnqueueOrder indicates an expected call of EnqueueOrder.
func (mr *MockOrderProcessingMockRecorder) EnqueueOrder(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueOrder", reflect.TypeOf((*MockOrderProcessing)(nil).EnqueueOrder), arg0, arg1)
}

// StartProcessing mocks base method.
func (m *MockOrderProcessing) StartProcessing(arg0 context.Context, arg1 int) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartProcessing", arg0, arg1)
}

// StartProcessing indicates an expected call of StartProcessing.
func (mr *MockOrderProcessingMockRecorder) StartProcessing(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProcessing", reflect.TypeOf((*MockOrderProcessing)(nil).StartProcessing), arg0, arg1)
}

// StopProcessing mocks base method.
func (m *MockOrderProcessing) StopProcessing() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StopProcessing")
}

// StopProcessing indicates an expected call of StopProcessing.
func (mr *MockOrderProcessingMockRecorder) StopProcessing() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopProcessing", reflect.TypeOf((*MockOrderProcessing)(nil).StopProcessing))
}
